input.file <- "./data/celegans_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "celegans_gene_ensembl")
celegans_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
celegans_lengths$length <- celegans_lengths$end_position - celegans_lengths$start_position
write.csv(celegans_lengths, file = "./data/celegans_lengths.csv")
}
celegans_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- celegans_lengths$length[match(data.df$Gene.ID, celegans_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# Pair down samples
data.df <- data.df[,c(1,2,5,6,8,14,18,22,ncol(data.df))]
# Shorten sample names
names(data.df) <- c("Gene.ID", "Gene.Name", "NSM", "Neuron", "Motor Neuron", "Gonad", "Somatic Cell", "Pharyngeal Muscle Cell", "length")
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Celegans"
melt.data <- rbind(melt.data, melt.data2)
fcounts <- readRDS(file = "../public_data/expression_data/Obimaculoides/fcounts.RDS")
counts <- as.data.frame(fcounts$counts)
feature_lengths <- fcounts$annotation$Length[match(rownames(counts), fcounts$annotation$GeneID)]
tpm.func <- function(counts,len) {
x <- counts/len
return(t(t(x)*1e6/colSums(x)))
}
tpm <- tpm.func(counts, feature_lengths)
tpm <- as.data.frame(tpm)
rownames(tpm) <- rownames(counts)
data_qs <- qsmooth(tpm, group_factor = c(1:10, rep(11,4), rep(12,5)))
tpm <- as.data.frame(data_qs@qsmoothData)
SraRunTable <- read.table(file = "../public_data/expression_data/Obimaculoides/SraRunTable.txt", sep = "\t", header = TRUE)
sample.names <- colnames(tpm)
sample.names <- as.data.frame(sample.names)
sample.names$Run <- sapply(SraRunTable$Run, function(x) SraRunTable$Run[grep(x, sample.names$sample.names)])
colnames(tpm) <- sample.names$Run[match(colnames(tpm), sample.names$sample.names)]
tpm$Gene.ID <- rownames(tpm)
input.file <- "./data/obimaculoides_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useMart("metazoa_mart",dataset="obimaculoides_eg_gene", host="metazoa.ensembl.org")
obimaculoides_lengths <- getBM(attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = tpm$Gene.ID, mart = ensembl)
obimaculoides_lengths$length <- obimaculoides_lengths$end_position - obimaculoides_lengths$start_position
write.csv(obimaculoides_lengths, file = "./data/obimaculoides_lengths.csv")
}
obimaculoides_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
tpm$length <- obimaculoides_lengths$length[match(tpm$Gene.ID, obimaculoides_lengths$ensembl_gene_id)]
tpm <- na.omit(tpm)
# Rename samples according to tissue
names(tpm) <- SraRunTable$tissue[match(names(tpm), SraRunTable$Run)]
names(tpm)[c(20,21)] <- c("Gene.ID", "length")
names(tpm) <- c("Ova", "Testes", "Posterior Salivary Gland", "Skin", "Suckers", "Embryos", "Retina", "Optic Lobe", "Axial Nerve Cord", "Hepatopancreas, Kidney, Heart", "Subesophageal Brain", "Subesophageal Brain", "Subesophageal Brain", "Subesophageal Brain", "Supraesophageal Brain", "Supraesophageal Brain", "Supraesophageal Brain", "Supraesophageal Brain", "Supraesophageal Brain", "Gene.ID", "length")
melt.data2 <- melt(tpm, id.vars = c("Gene.ID", "length"))
melt.data2$species <- "Obimaculoides"
melt.data <- rbind(melt.data, melt.data2)
fcounts <- readRDS(file = "../public_data/expression_data/Dmelanogaster/fcounts.RDS")
counts <- as.data.frame(fcounts$counts)
feature_lengths <- fcounts$annotation$Length[match(rownames(counts), fcounts$annotation$GeneID)]
tpm.func <- function(counts,len) {
x <- counts/len
return(t(t(x)*1e6/colSums(x)))
}
tpm <- tpm.func(counts, feature_lengths)
tpm <- as.data.frame(tpm)
rownames(tpm) <- rownames(counts)
# Smooth quantile normalize
data_qs <- qsmooth(tpm, group_factor = c(1,1,2,2,3,4,5,5,3,4))
tpm <- as.data.frame(data_qs@qsmoothData)
SraRunTable <- read.table(file = "../public_data/expression_data/Dmelanogaster/SraRunTable.txt", sep = "\t", header = TRUE)
sample.names <- colnames(tpm)
sample.names <- as.data.frame(sample.names)
sample.names$Run <- sapply(SraRunTable$Run, function(x) SraRunTable$Run[grep(x, sample.names$sample.names)])
colnames(tpm) <- sample.names$Run[match(colnames(tpm), sample.names$sample.names)]
tpm$Gene.ID <- rownames(tpm)
input.file <- "./data/dmelanogaster_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useMart("metazoa_mart",dataset="dmelanogaster_eg_gene", host="metazoa.ensembl.org")
dmelanogaster_lengths <- getBM(attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = tpm$Gene.ID, mart = ensembl)
dmelanogaster_lengths$length <- dmelanogaster_lengths$end_position - dmelanogaster_lengths$start_position
write.csv(dmelanogaster_lengths, file = "./data/dmelanogaster_lengths.csv")
}
dmelanogaster_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
tpm$length <- dmelanogaster_lengths$length[match(tpm$Gene.ID, dmelanogaster_lengths$ensembl_gene_id)]
tpm <- na.omit(tpm)
# Rename samples according to tissue
names(tpm) <- SraRunTable$Sample_Name[match(names(tpm), SraRunTable$Run)]
names(tpm)[c(11,12)] <- c("Gene.ID", "length")
names(tpm) <- c("Imaginal Discs", "Imaginal Discs", "Fat Body", "Fat Body", "Salivary Glands", "Digestive System", "CNS", "CNS", "Salivary Glands", "Digestive System", "Gene.ID", "length")
melt.data2 <- melt(tpm, id.vars = c("Gene.ID", "length"))
melt.data2$species <- "Dmelanogaster"
melt.data <- rbind(melt.data, melt.data2)
# read in expression data for Z. mays
data.df <- read.table(file = "../public_data/expression_data/Zea_mays_E-GEOD-62778-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/zmays_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useMart("plants_mart",dataset="zmays_eg_gene", host="plants.ensembl.org")
zmays_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
zmays_lengths$length <- zmays_lengths$end_position - zmays_lengths$start_position
write.csv(zmays_lengths, file = "./data/zmays_lengths.csv")
}
zmays_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- zmays_lengths$length[match(data.df$Gene.ID, zmays_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Zmays"
melt.data <- rbind(melt.data, melt.data2)
# Reorder factor levels
# melt.data$species <- factor(melt.data$species, levels(factor(melt.data$species))[c(4,7,6,5,2,3,1,8)])
# Plot data with facet_wrap
# g <- ggplot(melt.data, aes(x = length/1000, y = value^(1/3), col = variable)) + annotate("rect", xmin = 100, xmax = Inf, ymin = -Inf, ymax = Inf, fill = "grey", alpha = 0.3) + geom_smooth(se = FALSE) + scale_x_log10() + annotation_logticks(sides = "b") + facet_wrap(~species, scales = "free", ncol = 4) + scale_colour_manual(values = c("brain" = "red", "liver" = "grey", "testis" = "grey", "colon" = "grey", "heart" = "grey", "kidney" = "grey", "lung" = "grey", "skeletal.muscle.tissue" = "grey", "spleen" = "grey", "adipose.tissue" = "grey", "duodenum" = "grey", "muscle.tissue" = "grey", "adrenal.gland" = "grey", "breast" = "grey", "leukocyte" = "grey", "lymph.node" = "grey", "ovary" = "grey", "prostate.gland" = "grey", "thyroid.gland" = "grey")) + theme_classic() + xlab("Gene length (kb)") + ylab("Gene expression (TPM)")
#
# ggsave(g, filename = "./plots/Vertebrate_LGE.pdf", device = "pdf", width = 16, units = "in", height = 6, scale = 1, useDingbats = FALSE)
# Alternative way to plot data using split.
data.split <- split(melt.data, f = melt.data$species)
g1 <- ggplot(data.split$Hsapiens, aes(x = length/1000, y = value^(1/3), col = variable)) + annotate("rect", xmin = 100, xmax = Inf, ymin = -Inf, ymax = Inf, fill = "grey", alpha = 0.3) + geom_smooth(se = FALSE) + scale_x_log10(limits = c(1e-2,1e4)) + annotation_logticks(sides = "b") + scale_colour_manual(values = c("brain" = "red","liver" = "grey", "testis" = "grey", "colon" = "grey", "heart" = "grey", "kidney" = "grey", "lung" = "grey", "skeletal.muscle.tissue" = "grey", "spleen" = "grey", "adipose.tissue" = "grey", "duodenum" = "grey", "muscle.tissue" = "grey", "adrenal.gland" = "grey", "breast" = "grey", "leukocyte" = "grey", "lymph.node" = "grey", "ovary" = "grey", "prostate.gland" = "grey", "thyroid.gland" = "grey", "NSM" = "red", "Neuron" = "red", "Motor Neuron" = "red", "Gonad" = "grey", "Somatic Cell" = "grey", "Pharyngeal Muscle Cell" = "grey", "Suckers" = "red", "Retina" = "red", "Optic Lobe" = "red", "Axial Nerve Cord" = "red", "Subesophageal Brain" = "red", "Supraesophageal Brain" = "red", "Ova" = "grey", "Testes" = "grey", "Posterior Salivary Gland" = "grey", "Skin" = "grey", "Embryos" = "grey", "Hepatopancreas, Kidney, Heart" = "grey", "Imaginal Discs" = "grey", "Fat Body" = "grey", "Salivary Glands" = "grey", "Digestive System" = "grey", "CNS" = "red", "aleurone" = "grey", "basal.endosperm.transfer.layer" = "grey", "central.starchy.endosperm" = "grey", "conducting.zone" = "grey", "plant.embryo" = "grey", "plant.embryo.surrounding.region" = "grey", "nucellus" = "grey", "pericarp" = "grey", "placento.chalazal.region" = "grey", "vascular.region.of.the.pedicel" = "grey")) + theme_classic() + xlab("Gene length (kb)") + ylab("Gene expression (Cube root TPM)") + theme(legend.position = c(0.2, 0.5), legend.text = element_text(size= 8))
g2 <- g1 %+% data.split$Mmusculus
g3 <- g1 %+% data.split$Mmulatta
g4 <- g1 %+% data.split$Mdomestica
g5 <- g1 %+% data.split$Btaurus
g6 <- g1 %+% data.split$Ggallus
g7 <- g1 %+% data.split$Acarolinensis
g8 <- g1 %+% data.split$Xtropicalis
g9 <- g1 %+% data.split$Celegans
g10 <- g1 %+% data.split$Obimaculoides
g11 <- g1 %+% data.split$Dmelanogaster
g12 <- g1 %+% data.split$Zmays
g <- arrangeGrob(g1,g2,g3,g4,g5,g6,g7,g8,g9,g10,g11,g12, ncol = 1)
ggsave(g, filename = "./plots/Combined_LGE_qsmooth.pdf", device = "pdf", width = 30, units = "mm", height = 225, scale = 2, useDingbats = FALSE)
g12
g9
g10
g11
library(biomaRt)
library(ggplot2)
library(reshape2)
library(preprocessCore)
library(gridExtra)
library(qsmooth)
# read in expression data for mouse
data.df <- read.table(file = "../public_data/expression_data/Mus_musculus_E-GEOD-43721-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/mmusculus_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmusculus_gene_ensembl")
mmusculus_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
mmusculus_lengths$length <- mmusculus_lengths$end_position - mmusculus_lengths$start_position
write.csv(mmusculus_lengths, file = "./data/mmusculus_lengths.csv")
}
mmusculus_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- mmusculus_lengths$length[match(data.df$Gene.ID, mmusculus_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data$Gene.Name <- NULL
melt.data$species <- "Mmusculus"
# read in expression data for chicken
data.df <- read.table(file = "../public_data/expression_data/Gallus_gallus_E-MTAB-2797-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/ggallus_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "ggallus_gene_ensembl")
ggallus_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
ggallus_lengths$length <- ggallus_lengths$end_position - ggallus_lengths$start_position
write.csv(ggallus_lengths, file = "./data/ggallus_lengths.csv")
}
ggallus_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- ggallus_lengths$length[match(data.df$Gene.ID, ggallus_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Ggallus"
melt.data <- rbind(melt.data, melt.data2)
# read in expression data for cow
data.df <- read.table(file = "../public_data/expression_data/Bos_taurus_E-MTAB-2596-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/btaurus_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "btaurus_gene_ensembl")
btaurus_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
btaurus_lengths$length <- btaurus_lengths$end_position - btaurus_lengths$start_position
write.csv(btaurus_lengths, file = "./data/btaurus_lengths.csv")
}
btaurus_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- btaurus_lengths$length[match(data.df$Gene.ID, btaurus_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Btaurus"
melt.data <- rbind(melt.data, melt.data2)
# read in expression data for cow
data.df <- read.table(file = "../public_data/expression_data/Anolis_carolinensis_E-MTAB-3727-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/acarolinensis_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "acarolinensis_gene_ensembl")
acarolinensis_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
acarolinensis_lengths$length <- acarolinensis_lengths$end_position - acarolinensis_lengths$start_position
write.csv(acarolinensis_lengths, file = "./data/acarolinensis_lengths.csv")
}
acarolinensis_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- acarolinensis_lengths$length[match(data.df$Gene.ID, acarolinensis_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Acarolinensis"
melt.data <- rbind(melt.data, melt.data2)
# read in expression data for Gray short-tailed opossum
data.df <- read.table(file = "../public_data/expression_data/Monodelphis_domestica_E-MTAB-3719-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/mdomestica_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mdomestica_gene_ensembl")
mdomestica_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
mdomestica_lengths$length <- mdomestica_lengths$end_position - mdomestica_lengths$start_position
write.csv(mdomestica_lengths, file = "./data/mdomestica_lengths.csv")
}
mdomestica_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- mdomestica_lengths$length[match(data.df$Gene.ID, mdomestica_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Mdomestica"
melt.data <- rbind(melt.data, melt.data2)
# read in expression data for macaque
data.df <- read.table(file = "../public_data/expression_data/Macaca_mulatta_E-MTAB-2799-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/mmulatta_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "mmulatta_gene_ensembl")
mmulatta_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
mmulatta_lengths$length <- mmulatta_lengths$end_position - mmulatta_lengths$start_position
write.csv(mmulatta_lengths, file = "./data/mmulatta_lengths.csv")
}
mmulatta_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- mmulatta_lengths$length[match(data.df$Gene.ID, mmulatta_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Mmulatta"
melt.data <- rbind(melt.data, melt.data2)
# read in expression data for Frog
data.df <- read.table(file = "../public_data/expression_data/Xenopus_tropicalis_E-MTAB-3726-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/xtropicalis_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "xtropicalis_gene_ensembl")
xtropicalis_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
xtropicalis_lengths$length <- xtropicalis_lengths$end_position - xtropicalis_lengths$start_position
write.csv(xtropicalis_lengths, file = "./data/xtropicalis_lengths.csv")
}
xtropicalis_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- xtropicalis_lengths$length[match(data.df$Gene.ID, xtropicalis_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Xtropicalis"
melt.data <- rbind(melt.data, melt.data2)
# read in expression data for Human
data.df <- read.table(file = "../public_data/expression_data/Homo_sapiens_E-MTAB-513-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/hsapiens_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
hsapiens_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
hsapiens_lengths$length <- hsapiens_lengths$end_position - hsapiens_lengths$start_position
write.csv(hsapiens_lengths, file = "./data/hsapiens_lengths.csv")
}
hsapiens_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- hsapiens_lengths$length[match(data.df$Gene.ID, hsapiens_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Hsapiens"
melt.data <- rbind(melt.data, melt.data2)
# Rename Cerebellum and Hypothalamus to Brain.
melt.data[melt.data$variable == "cerebellum" | melt.data$variable == "hypothalamus",3] <- "brain"
# read in expression data for nematode
data.df <- read.table(file = "../public_data/expression_data/Caenorhabditis_elegans_E-MTAB-2812-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/celegans_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useEnsembl(biomart = "ensembl", dataset = "celegans_gene_ensembl")
celegans_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
celegans_lengths$length <- celegans_lengths$end_position - celegans_lengths$start_position
write.csv(celegans_lengths, file = "./data/celegans_lengths.csv")
}
celegans_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- celegans_lengths$length[match(data.df$Gene.ID, celegans_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# Pair down samples
data.df <- data.df[,c(1,2,5,6,8,14,18,22,ncol(data.df))]
# Shorten sample names
names(data.df) <- c("Gene.ID", "Gene.Name", "NSM", "Neuron", "Motor Neuron", "Gonad", "Somatic Cell", "Pharyngeal Muscle Cell", "length")
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Celegans"
melt.data <- rbind(melt.data, melt.data2)
fcounts <- readRDS(file = "../public_data/expression_data/Obimaculoides/fcounts.RDS")
counts <- as.data.frame(fcounts$counts)
feature_lengths <- fcounts$annotation$Length[match(rownames(counts), fcounts$annotation$GeneID)]
tpm.func <- function(counts,len) {
x <- counts/len
return(t(t(x)*1e6/colSums(x)))
}
tpm <- tpm.func(counts, feature_lengths)
tpm <- as.data.frame(tpm)
rownames(tpm) <- rownames(counts)
data_qs <- qsmooth(tpm, group_factor = c(1:10, rep(11,4), rep(12,5)))
tpm <- as.data.frame(data_qs@qsmoothData)
SraRunTable <- read.table(file = "../public_data/expression_data/Obimaculoides/SraRunTable.txt", sep = "\t", header = TRUE)
sample.names <- colnames(tpm)
sample.names <- as.data.frame(sample.names)
sample.names$Run <- sapply(SraRunTable$Run, function(x) SraRunTable$Run[grep(x, sample.names$sample.names)])
colnames(tpm) <- sample.names$Run[match(colnames(tpm), sample.names$sample.names)]
tpm$Gene.ID <- rownames(tpm)
input.file <- "./data/obimaculoides_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useMart("metazoa_mart",dataset="obimaculoides_eg_gene", host="metazoa.ensembl.org")
obimaculoides_lengths <- getBM(attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = tpm$Gene.ID, mart = ensembl)
obimaculoides_lengths$length <- obimaculoides_lengths$end_position - obimaculoides_lengths$start_position
write.csv(obimaculoides_lengths, file = "./data/obimaculoides_lengths.csv")
}
obimaculoides_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
tpm$length <- obimaculoides_lengths$length[match(tpm$Gene.ID, obimaculoides_lengths$ensembl_gene_id)]
tpm <- na.omit(tpm)
# Rename samples according to tissue
names(tpm) <- SraRunTable$tissue[match(names(tpm), SraRunTable$Run)]
names(tpm)[c(20,21)] <- c("Gene.ID", "length")
names(tpm) <- c("Ova", "Testes", "Posterior Salivary Gland", "Skin", "Suckers", "Embryos", "Retina", "Optic Lobe", "Axial Nerve Cord", "Hepatopancreas, Kidney, Heart", "Subesophageal Brain", "Subesophageal Brain", "Subesophageal Brain", "Subesophageal Brain", "Supraesophageal Brain", "Supraesophageal Brain", "Supraesophageal Brain", "Supraesophageal Brain", "Supraesophageal Brain", "Gene.ID", "length")
melt.data2 <- melt(tpm, id.vars = c("Gene.ID", "length"))
melt.data2$species <- "Obimaculoides"
melt.data <- rbind(melt.data, melt.data2)
fcounts <- readRDS(file = "../public_data/expression_data/Dmelanogaster/fcounts.RDS")
counts <- as.data.frame(fcounts$counts)
feature_lengths <- fcounts$annotation$Length[match(rownames(counts), fcounts$annotation$GeneID)]
tpm.func <- function(counts,len) {
x <- counts/len
return(t(t(x)*1e6/colSums(x)))
}
tpm <- tpm.func(counts, feature_lengths)
tpm <- as.data.frame(tpm)
rownames(tpm) <- rownames(counts)
# Smooth quantile normalize
data_qs <- qsmooth(tpm, group_factor = c(1,1,2,2,3,4,5,5,3,4))
tpm <- as.data.frame(data_qs@qsmoothData)
SraRunTable <- read.table(file = "../public_data/expression_data/Dmelanogaster/SraRunTable.txt", sep = "\t", header = TRUE)
sample.names <- colnames(tpm)
sample.names <- as.data.frame(sample.names)
sample.names$Run <- sapply(SraRunTable$Run, function(x) SraRunTable$Run[grep(x, sample.names$sample.names)])
colnames(tpm) <- sample.names$Run[match(colnames(tpm), sample.names$sample.names)]
tpm$Gene.ID <- rownames(tpm)
input.file <- "./data/dmelanogaster_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useMart("metazoa_mart",dataset="dmelanogaster_eg_gene", host="metazoa.ensembl.org")
dmelanogaster_lengths <- getBM(attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = tpm$Gene.ID, mart = ensembl)
dmelanogaster_lengths$length <- dmelanogaster_lengths$end_position - dmelanogaster_lengths$start_position
write.csv(dmelanogaster_lengths, file = "./data/dmelanogaster_lengths.csv")
}
dmelanogaster_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
tpm$length <- dmelanogaster_lengths$length[match(tpm$Gene.ID, dmelanogaster_lengths$ensembl_gene_id)]
tpm <- na.omit(tpm)
# Rename samples according to tissue
names(tpm) <- SraRunTable$Sample_Name[match(names(tpm), SraRunTable$Run)]
names(tpm)[c(11,12)] <- c("Gene.ID", "length")
names(tpm) <- c("Imaginal Discs", "Imaginal Discs", "Fat Body", "Fat Body", "Salivary Glands", "Digestive System", "CNS", "CNS", "Salivary Glands", "Digestive System", "Gene.ID", "length")
melt.data2 <- melt(tpm, id.vars = c("Gene.ID", "length"))
melt.data2$species <- "Dmelanogaster"
melt.data <- rbind(melt.data, melt.data2)
# read in expression data for Z. mays
data.df <- read.table(file = "../public_data/expression_data/Zea_mays_E-GEOD-62778-query-results.tpms.tsv", sep = "\t", header = TRUE)
data.df[is.na(data.df)] <- 0
# Smooth quantile normalize
data_qs <- qsmooth(data.df[-c(1:2)], group_factor = 1:length(names(data.df[-c(1:2)])))
data.df[-c(1:2)] <- data_qs@qsmoothData
# obtain gene lengths
input.file <- "./data/zmays_lengths.csv"
if(!file.exists(input.file)){
ensembl <- useMart("plants_mart",dataset="zmays_eg_gene", host="plants.ensembl.org")
zmays_lengths <- getBM(filters = "ensembl_gene_id", attributes = c("ensembl_gene_id", "chromosome_name", "start_position", "end_position"), values = data.df$Gene.ID, mart = ensembl)
zmays_lengths$length <- zmays_lengths$end_position - zmays_lengths$start_position
write.csv(zmays_lengths, file = "./data/zmays_lengths.csv")
}
zmays_lengths <- read.csv(input.file, header = TRUE, row.names = 1)
data.df$length <- zmays_lengths$length[match(data.df$Gene.ID, zmays_lengths$ensembl_gene_id)]
data.df <- na.omit(data.df)
# melt data for plotting
melt.data2 <- melt(data.df, id.vars = c("Gene.ID", "Gene.Name", "length"))
melt.data2$Gene.Name <- NULL
melt.data2$species <- "Zmays"
melt.data <- rbind(melt.data, melt.data2)
# Reorder factor levels
# melt.data$species <- factor(melt.data$species, levels(factor(melt.data$species))[c(4,7,6,5,2,3,1,8)])
# Plot data with facet_wrap
# g <- ggplot(melt.data, aes(x = length/1000, y = value^(1/3), col = variable)) + annotate("rect", xmin = 100, xmax = Inf, ymin = -Inf, ymax = Inf, fill = "grey", alpha = 0.3) + geom_smooth(se = FALSE) + scale_x_log10() + annotation_logticks(sides = "b") + facet_wrap(~species, scales = "free", ncol = 4) + scale_colour_manual(values = c("brain" = "red", "liver" = "grey", "testis" = "grey", "colon" = "grey", "heart" = "grey", "kidney" = "grey", "lung" = "grey", "skeletal.muscle.tissue" = "grey", "spleen" = "grey", "adipose.tissue" = "grey", "duodenum" = "grey", "muscle.tissue" = "grey", "adrenal.gland" = "grey", "breast" = "grey", "leukocyte" = "grey", "lymph.node" = "grey", "ovary" = "grey", "prostate.gland" = "grey", "thyroid.gland" = "grey")) + theme_classic() + xlab("Gene length (kb)") + ylab("Gene expression (TPM)")
#
# ggsave(g, filename = "./plots/Vertebrate_LGE.pdf", device = "pdf", width = 16, units = "in", height = 6, scale = 1, useDingbats = FALSE)
# Alternative way to plot data using split.
data.split <- split(melt.data, f = melt.data$species)
g1 <- ggplot(data.split$Hsapiens, aes(x = length/1000, y = value^(1/3), col = variable)) + annotate("rect", xmin = 100, xmax = Inf, ymin = -Inf, ymax = Inf, fill = "grey", alpha = 0.3) + geom_smooth(se = FALSE) + scale_x_log10(limits = c(1e-2,1e4)) + annotation_logticks(sides = "b") + scale_colour_manual(values = c("brain" = "red","liver" = "grey", "testis" = "grey", "colon" = "grey", "heart" = "grey", "kidney" = "grey", "lung" = "grey", "skeletal.muscle.tissue" = "grey", "spleen" = "grey", "adipose.tissue" = "grey", "duodenum" = "grey", "muscle.tissue" = "grey", "adrenal.gland" = "grey", "breast" = "grey", "leukocyte" = "grey", "lymph.node" = "grey", "ovary" = "grey", "prostate.gland" = "grey", "thyroid.gland" = "grey", "NSM" = "red", "Neuron" = "red", "Motor Neuron" = "red", "Gonad" = "grey", "Somatic Cell" = "grey", "Pharyngeal Muscle Cell" = "grey", "Suckers" = "red", "Retina" = "red", "Optic Lobe" = "red", "Axial Nerve Cord" = "red", "Subesophageal Brain" = "red", "Supraesophageal Brain" = "red", "Ova" = "grey", "Testes" = "grey", "Posterior Salivary Gland" = "grey", "Skin" = "grey", "Embryos" = "grey", "Hepatopancreas, Kidney, Heart" = "grey", "Imaginal Discs" = "grey", "Fat Body" = "grey", "Salivary Glands" = "grey", "Digestive System" = "grey", "CNS" = "red", "aleurone" = "grey", "basal.endosperm.transfer.layer" = "grey", "central.starchy.endosperm" = "grey", "conducting.zone" = "grey", "plant.embryo" = "grey", "plant.embryo.surrounding.region" = "grey", "nucellus" = "grey", "pericarp" = "grey", "placento.chalazal.region" = "grey", "vascular.region.of.the.pedicel" = "grey")) + theme_classic() + xlab("Gene length (kb)") + ylab("Gene expression (Cube root TPM)") + theme(legend.position = c(0.2, 0.5), legend.text = element_text(size= 8))
g2 <- g1 %+% data.split$Mmusculus
g3 <- g1 %+% data.split$Mmulatta
g4 <- g1 %+% data.split$Mdomestica
g5 <- g1 %+% data.split$Btaurus
g6 <- g1 %+% data.split$Ggallus
g7 <- g1 %+% data.split$Acarolinensis
g8 <- g1 %+% data.split$Xtropicalis
g9 <- g1 %+% data.split$Celegans
g10 <- g1 %+% data.split$Obimaculoides
g11 <- g1 %+% data.split$Dmelanogaster
g12 <- g1 %+% data.split$Zmays
g <- arrangeGrob(g1,g2,g3,g4,g5,g6,g7,g8,g9,g10,g11,g12, ncol = 1)
ggsave(g, filename = "./plots/Combined_LGE_qsmooth.pdf", device = "pdf", width = 30, units = "mm", height = 225, scale = 1, useDingbats = FALSE)
ggsave(g, filename = "./plots/Combined_LGE_qsmooth.pdf", device = "pdf", width = 30, units = "mm", height = 225, scale = 4, useDingbats = FALSE)
ggsave(g, filename = "./plots/Combined_LGE_qsmooth.pdf", device = "pdf", width = 30, units = "mm", height = 225, scale = 5, useDingbats = FALSE)
ggsave(g, filename = "./plots/Combined_LGE_qsmooth.pdf", device = "pdf", width = 30, units = "mm", height = 225, scale = 6, useDingbats = FALSE)
ggsave(g, filename = "./plots/Combined_LGE_qsmooth.pdf", device = "pdf", width = 30, units = "mm", height = 225, scale = 6, useDingbats = FALSE, limitsize = F)
library(REVAvis)
REVAvis()
REVAvis <- function(x, ...)
{
shiny::runApp(appDir = system.file("application", package = 'REVAvis'),
...)
}
REVAvis()
motomiNs <- readRDS("/data1/Yoo scRNA-seq manuscript/data/downsampled/raw/motomiNs.RDS")
library(Seurat)
FeaturePlot(motomiNs, features = "HEXIM1")
FeaturePlot(motomiNs, features = "HEXIM1", sort.cell = T)
?Seurat
VlnPlot(motomiNs, features = "HEXIM1")
VlnPlot(motomiNs, features = "HEXIM1", group.by = "orig.ident")
VlnPlot(motomiNs, features = "HEXIM1", group.by = "orig.ident", log = T)
VlnPlot(motomiNs, features = c("HEXIM1", "HEXIM2", "LARP7", "X7SK.2"), group.by = "orig.ident")
VlnPlot(motomiNs, features = c("HEXIM1", "HEXIM2", "LARP7", "X7SK.2", "MEPCE"), group.by = "orig.ident")
VlnPlot(motomiNs, features = c("HEXIM1", "HEXIM2", "LARP7", "X7SK.2", "MEPCE", "CTIP2"), group.by = "orig.ident")
VlnPlot(motomiNs, features = c("HEXIM1", "HEXIM2", "LARP7", "X7SK.2", "MEPCE", "CDK9"), group.by = "orig.ident")
VlnPlot(motomiNs, features = c("HEXIM1", "HEXIM2", "LARP7", "X7SK.2", "MEPCE", "CDK9"), group.by = "orig.ident", pt.size = NA)
VlnPlot(motomiNs, features = c("HEXIM1", "HEXIM2", "LARP7", "X7SK.2", "MEPCE", "CDK9"), group.by = "orig.ident", pt.size = NULL)
VlnPlot(motomiNs, features = c("HEXIM1", "HEXIM2", "LARP7", "X7SK.2", "MEPCE", "CDK9"), group.by = "orig.ident", pt.size = 0)
library(shiny); runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app2.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app3.R')
library(shiny); runApp('/data2/REVAvis/REVAvis/inst/application/app3.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app3.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app3.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app3.R')
runApp('/data2/REVAvis/REVAvis/inst/application/app3.R')
library(shiny); runApp('/data2/REVAvis/REVAvis/inst/application/app3.R')
gc()
library(shiny); runApp('/data2/REVAvis/REVAvis/inst/application/app3.R')
